import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from keyboards import choose_breathing_practice, repeat_for_breathing, try_technique

breathing_router = Router()

async def execute_breathing(callback: CallbackQuery, technique: str):
    try:
        await callback.message.delete()
    except:
        pass

    if technique == "square_breathing":
        steps = [
            ("üü¢ –í–¥–æ—Ö", 4),
            ("üü° –ó–∞–¥–µ—Ä–∂–∫–∞", 4),
            ("üî¥ –í—ã–¥–æ—Ö", 4),
            ("üü£ –ü–∞—É–∑–∞", 4)
        ]
    elif technique == "breathing478":
        steps = [
            ("üü¢ –í–¥–æ—Ö", 4),
            ("üü° –ó–∞–¥–µ—Ä–∂–∫–∞", 7),
            ("üî¥ –í—ã–¥–æ—Ö", 8)
        ]
    elif technique == "breathing639":
        steps = [
            ("üü¢ –í–¥–æ—Ö", 4),
            ("üü° –ó–∞–¥–µ—Ä–∂–∫–∞", 7),
            ("üî¥ –í—ã–¥–æ—Ö", 8)
        ]
    elif technique == "diaphragmatic_breathing":
        steps = [
            ("üü¢ –í–¥–æ—Ö", 2),
            ("üî¥ –í—ã–¥–æ—Ö", 5)
        ]
    else:
        steps = []


    msg = await callback.message.answer(f"üåÄ <b>{technique.replace('_', ' ').title()}</b> –Ω–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ 3...")
    await asyncio.sleep(3)

    for step_message, sec in steps:
        for s in range(sec, 0, -1):
            await msg.edit_text(f"{step_message} : {s} —Å–µ–∫...")
            await asyncio.sleep(1)

    await msg.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ü–∏–∫–ª 3-5 —Ä–∞–∑."
                        f"–¢–µ—Ö–Ω–∏–∫–∞: {technique.replace('_', ' ').title()}",
                        reply_markup=repeat_for_breathing(technique))

@breathing_router.callback_query(F.data == "square_breathing")
async def square_breathing(callback : CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(
        text="üåÄ <b>–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ</b>\n\n"
             "‚≠êÔ∏è <i>–ü–æ–ø—É–ª—è—Ä–Ω–∞—è, –ø—Ä–æ—Å—Ç–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏:</i>\n"
             "‚Ä¢ —Ç—Ä–µ–≤–æ–≥–µ\n‚Ä¢ —Å—Ç—Ä–∞—Ö–µ\n‚Ä¢ –ø–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫–∞—Ö\n‚Ä¢ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏\n\n"
             "üìù <b>–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:</b>\n"
             "1. –ù–∞ 4 —Å—á–µ—Ç–∞ –≤–¥–æ—Ö–Ω—É–ª–∏ –Ω–æ—Å–æ–º\n"
             "2. –ù–∞ 4 —Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∞–ª–∏ –¥—ã—Ö–∞–Ω–∏–µ\n"
             "3. –ù–∞ 4 —Å—á–µ—Ç–∞ –≤—ã–¥–æ—Ö–Ω—É–ª–∏ —Ä—Ç–æ–º\n"
             "4. –ù–∞ 4 —Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∞–ª–∏ –¥—ã—Ö–∞–Ω–∏–µ\n\n"
             "‚è± <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ü–∏–∫–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç\n\n"
             "‚ú® <b>–°–æ–≤–µ—Ç:</b>\n"
             "–î–ª—è –±–æ–ª—å—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –¥—ã—à–∏—Ç–µ, –≥–ª—è–¥—è –Ω–∞ –ª—é–±–æ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç "
             "–∏ –º—ã—Å–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—è—Å—å –∏–∑ —É–≥–ª–∞ –≤ —É–≥–æ–ª\n\n"
             "‚ö°Ô∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
             "‚Ä¢ –ü—Ä–∏ –≤–¥–æ—Ö–µ –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç—Å—è\n"
             "‚Ä¢ –ü—Ä–∏ –≤—ã–¥–æ—Ö–µ —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç—Å—è\n"
             "‚Ä¢ –¢–∞–∫–∞—è —Å—Ö–µ–º–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–≥–µ—Ç–∞—Ç–∏–≤–Ω—É—é –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
        reply_markup=try_technique("square_breathing")
    )

@breathing_router.callback_query(F.data == "breathing478")
async def breathing478(callback : CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        text="üå¨Ô∏è <b>–î—ã—Ö–∞–Ω–∏–µ 4-7-8</b>\n\n"
             "üíÜ‚Äç‚ôÇÔ∏è <i>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ç—Ä–µ–≤–æ–≥–∏</i>\n\n"
             "üîπ <b>–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:</b>\n"
             "1. –í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞\n"
             "2. –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 7 —Å—á–µ—Ç–æ–≤\n"
             "3. –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–¥–æ—Ö –Ω–∞ 8 —Å—á–µ—Ç–æ–≤\n\n"
             "‚ú® <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ, –∫–∞–∫ –Ω–∞ –≤—ã–¥–æ—Ö–µ —É—Ö–æ–¥—è—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏\n\n"
             "‚è± <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 10-30 —Ü–∏–∫–ª–æ–≤\n\n"
             "üí§ <b>–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ:</b> –ü–µ—Ä–µ–¥ —Å–Ω–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Å—ã–ø–∞–Ω–∏—è\n\n"
             "‚ö°Ô∏è <b>–≠—Ñ—Ñ–µ–∫—Ç:</b> –£–¥–ª–∏–Ω—è–µ—Ç –≤—ã–¥–æ—Ö, —á—Ç–æ —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
        reply_markup=try_technique("breathing478")
    )

@breathing_router.callback_query(F.data == "breathing639")
async def breathing639(callback : CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        text="üå™Ô∏è <b>–î—ã—Ö–∞–Ω–∏–µ 6-3-9</b> - –º–æ—â–Ω—ã–π –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å\n\n"
             "üî• <i>–≠–∫—Å–ø—Ä–µ—Å—Å-–º–µ—Ç–æ–¥ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —É—Å–ø–æ–∫–æ–µ–Ω–∏—è</i>\n\n"
             "üéØ <b>–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
             "1. –ì–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö —á–µ—Ä–µ–∑ –Ω–æ—Å (6 —Å–µ–∫)\n"
             "2. –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (3 —Å–µ–∫)\n"
             "3. –ü–ª–∞–≤–Ω—ã–π –≤—ã–¥–æ—Ö —Ä—Ç–æ–º (9 —Å–µ–∫)\n\n"
             "üîÑ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 5-15 —Ü–∏–∫–ª–æ–≤\n\n"
             "üí° <b>–°–µ–∫—Ä–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
             "‚Ä¢ –£–¥–ª–∏–Ω—ë–Ω–Ω—ã–π –≤—ã–¥–æ—Ö (–≤ 1.5 —Ä–∞–∑–∞ –¥–ª–∏–Ω–Ω–µ–µ –≤–¥–æ—Ö–∞)\n"
             "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É\n"
             "‚Ä¢ –ë—ã—Å—Ç—Ä–æ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞\n\n"
             "üåü <b>–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç:</b>\n"
             "- –ü–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏\n"
             "- –ü—Ä–∏ –æ—Å—Ç—Ä–æ–º —Å—Ç—Ä–µ—Å—Å–µ\n"
             "- –î–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è",
        reply_markup=try_technique("breathing639")
    )

@breathing_router.callback_query(F.data == "diaphragmatic_breathing")
async def diaphragmatic_breathing(callback : CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        text="üåä <b>–î–∏–∞—Ñ—Ä–∞–≥–º–∞–ª—å–Ω–æ–µ (–±—Ä—é—à–Ω–æ–µ) –¥—ã—Ö–∞–Ω–∏–µ</b>\n\n"
             "üß† <i>–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥—ã—Ö–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –º—ã —á–∞—Å—Ç–æ —Ç–µ—Ä—è–µ–º –∏–∑-–∑–∞ —Å—Ç—Ä–µ—Å—Å–∞</i>\n\n"
             "üîπ <b>–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:</b>\n"
             "1. –õ—è–≥—Ç–µ –Ω–∞ —Å–ø–∏–Ω—É, —Å–ª–µ–≥–∫–∞ —Å–æ–≥–Ω—É–≤ –Ω–æ–≥–∏\n"
             "2. –û–¥–Ω—É —Ä—É–∫—É –ø–æ–ª–æ–∂–∏—Ç–µ –Ω–∞ –∂–∏–≤–æ—Ç, –¥—Ä—É–≥—É—é –Ω–∞ –≥—Ä—É–¥—å\n"
             "3. –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤–¥–æ—Ö –Ω–æ—Å–æ–º (1-2 —Å–µ–∫) ‚Üí –∂–∏–≤–æ—Ç –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è\n"
             "4. –ü–ª–∞–≤–Ω—ã–π –≤—ã–¥–æ—Ö —Ä—Ç–æ–º (3-5 —Å–µ–∫) ‚Üí –∂–∏–≤–æ—Ç –≤—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è\n\n"
             "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–µ—Ä–µ–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ –ø–ª–µ—á–∏ –∏ —à–µ—é!\n\n"
             "‚ö°Ô∏è <b>–§–∏–∑–∏–æ–ª–æ–≥–∏—è:</b>\n"
             "- –î–∏–∞—Ñ—Ä–∞–≥–º–∞ –¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ 2 —Å–º –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑\n"
             "- –ù–∞–ø–æ–ª–Ω—è–µ—Ç –ª–µ–≥–∫–∏–µ –Ω–∞ 80% –æ—Ç –∏—Ö –µ–º–∫–æ—Å—Ç–∏\n"
             "- –í –Ω–æ—Ä–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∏–ø–æ–º –¥—ã—Ö–∞–Ω–∏—è\n\n"
             "üí™ <b>–≠—Ñ—Ñ–µ–∫—Ç—ã:</b>\n"
             "‚Ä¢ –°–Ω–∏–º–∞–µ—Ç –º—ã—à–µ—á–Ω—ã–µ –∑–∞–∂–∏–º—ã\n"
             "‚Ä¢ –£–º–µ–Ω—å—à–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å\n"
             "‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
             "‚Ä¢ –ù–∞—Å—ã—â–∞–µ—Ç –º–æ–∑–≥ –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º\n"
             "‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ\n\n"
             "üïØ <b>–î–ª—è —É—Å–∏–ª–µ–Ω–∏—è:</b> –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ 5-10 –º–∏–Ω 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å",
        reply_markup=try_technique("diaphragmatic_breathing")
    )

@breathing_router.callback_query(F.data.startswith("repeat_"))
async def repeat_technique(callback : CallbackQuery):
    await callback.answer()
    technique = callback.data.split('_', 1)[1]
    await execute_breathing(callback, technique)

@breathing_router.callback_query(F.data.startswith("try_"))
async def try_breathing_technique(callback: CallbackQuery):
    await callback.answer()
    technique = callback.data.split("_", 1)[1]
    await execute_breathing(callback, technique)
